// Generated by Haxe 4.1.1
#ifndef INCLUDED_persistence_MagLevConverter
#define INCLUDED_persistence_MagLevConverter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_869a921fcf5bba54
#define INCLUDED_869a921fcf5bba54
#include "maglev/MagLevAny.h"
#endif
HX_DECLARE_CLASS1(persistence,MagLevConverter)

namespace persistence{


class HXCPP_CLASS_ATTRIBUTES MagLevConverter_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MagLevConverter_obj OBJ_;
		MagLevConverter_obj();

	public:
		enum { _hx_ClassId = 0x03c35d1f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="persistence.MagLevConverter")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"persistence.MagLevConverter"); }

		inline static ::hx::ObjectPtr< MagLevConverter_obj > __new() {
			::hx::ObjectPtr< MagLevConverter_obj > __this = new MagLevConverter_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< MagLevConverter_obj > __alloc(::hx::Ctx *_hx_ctx) {
			MagLevConverter_obj *__this = (MagLevConverter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MagLevConverter_obj), false, "persistence.MagLevConverter"));
			*(void **)__this = MagLevConverter_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MagLevConverter_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MagLevConverter",96,18,45,24); }

		static  ::Dynamic convertToHaxe( ::maglev::MagLevAny x);
		static ::Dynamic convertToHaxe_dyn();

		static  ::maglev::MagLevAny convertToMagLev( ::Dynamic x);
		static ::Dynamic convertToMagLev_dyn();

};

} // end namespace persistence

#endif /* INCLUDED_persistence_MagLevConverter */ 
