// Generated by Haxe 4.1.1
#ifndef INCLUDED_persistence__Persistence_Getter
#define INCLUDED_persistence__Persistence_Getter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(persistence,_Persistence,Getter)

namespace persistence{
namespace _Persistence{


class HXCPP_CLASS_ATTRIBUTES Getter_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Getter_obj OBJ_;
		Getter_obj();

	public:
		enum { _hx_ClassId = 0x2cce5e02 };

		void __construct(::String recordType, ::Dynamic strategyMethod, ::Dynamic queryMapper, ::Dynamic resultMapper,bool useQueryValuesAsParams);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="persistence._Persistence.Getter")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"persistence._Persistence.Getter"); }
		static ::hx::ObjectPtr< Getter_obj > __new(::String recordType, ::Dynamic strategyMethod, ::Dynamic queryMapper, ::Dynamic resultMapper,bool useQueryValuesAsParams);
		static ::hx::ObjectPtr< Getter_obj > __alloc(::hx::Ctx *_hx_ctx,::String recordType, ::Dynamic strategyMethod, ::Dynamic queryMapper, ::Dynamic resultMapper,bool useQueryValuesAsParams);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Getter_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Getter",2b,53,d4,d7); }

		static void __boot();
		static  ::Dynamic __meta__;
		::String recordType;
		 ::Dynamic strategyMethod;
		 ::Dynamic queryMapper;
		 ::Dynamic resultMapper;
		bool useQueryValuesAsParams;
};

} // end namespace persistence
} // end namespace _Persistence

#endif /* INCLUDED_persistence__Persistence_Getter */ 
