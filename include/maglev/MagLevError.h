// Generated by Haxe 4.1.1
#ifndef INCLUDED_maglev_MagLevError
#define INCLUDED_maglev_MagLevError

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(maglev,MagLevAny)
HX_DECLARE_CLASS1(maglev,MagLevError)
HX_DECLARE_CLASS1(maglev,MagLevNumber)
HX_DECLARE_CLASS1(maglev,MagLevString)
HX_DECLARE_CLASS1(maglev,MagLevType)

namespace maglev{


class HXCPP_CLASS_ATTRIBUTES MagLevError_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MagLevError_obj OBJ_;
		MagLevError_obj();

	public:
		enum { _hx_ClassId = 0x44dbbe70 };

		void __construct( ::maglev::MagLevNumber code, ::maglev::MagLevString message, ::maglev::MagLevAny data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="maglev.MagLevError")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"maglev.MagLevError"); }
		static ::hx::ObjectPtr< MagLevError_obj > __new( ::maglev::MagLevNumber code, ::maglev::MagLevString message, ::maglev::MagLevAny data);
		static ::hx::ObjectPtr< MagLevError_obj > __alloc(::hx::Ctx *_hx_ctx, ::maglev::MagLevNumber code, ::maglev::MagLevString message, ::maglev::MagLevAny data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MagLevError_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MagLevError",3e,78,a4,15); }

		 ::maglev::MagLevNumber code;
		 ::maglev::MagLevString message;
		 ::maglev::MagLevAny data;
		 ::maglev::MagLevError create(int code,::String message, ::maglev::MagLevAny data);
		::Dynamic create_dyn();

		int getCode();
		::Dynamic getCode_dyn();

		::String getMessage();
		::Dynamic getMessage_dyn();

		 ::maglev::MagLevAny getData();
		::Dynamic getData_dyn();

		 ::maglev::MagLevType getType();
		::Dynamic getType_dyn();

		bool isEqual( ::maglev::MagLevError other);
		::Dynamic isEqual_dyn();

		 ::maglev::MagLevString toJson();
		::Dynamic toJson_dyn();

};

} // end namespace maglev

#endif /* INCLUDED_maglev_MagLevError */ 
