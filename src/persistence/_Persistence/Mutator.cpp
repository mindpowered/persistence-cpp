// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_persistence__Persistence_Mutator
#include <persistence/_Persistence/Mutator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9dae053d9ec60bd7_169_new,"persistence._Persistence.Mutator","new",0xb5d6dd75,"persistence._Persistence.Mutator.new","persistence/Persistence.hx",169,0x9767c4cf)
HX_LOCAL_STACK_FRAME(_hx_pos_9dae053d9ec60bd7_164_boot,"persistence._Persistence.Mutator","boot",0x5e43e97d,"persistence._Persistence.Mutator.boot","persistence/Persistence.hx",164,0x9767c4cf)
namespace persistence{
namespace _Persistence{

void Mutator_obj::__construct(::String recordType, ::Dynamic strategyMethod, ::Dynamic updateMapper){
            	HX_STACKFRAME(&_hx_pos_9dae053d9ec60bd7_169_new)
HXLINE( 170)		bool _hx_tmp;
HXDLIN( 170)		if (!(::Std_obj::isOfType(strategyMethod,( ( ::Dynamic)(::hx::ClassOf< ::String >()) )))) {
HXLINE( 170)			_hx_tmp = !(::Reflect_obj::isFunction(strategyMethod));
            		}
            		else {
HXLINE( 170)			_hx_tmp = false;
            		}
HXDLIN( 170)		if (_hx_tmp) {
HXLINE( 171)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("strategyMethod must be a string or function",97,7a,0d,90)));
            		}
HXLINE( 173)		bool _hx_tmp1;
HXDLIN( 173)		if (!(::Std_obj::isOfType(updateMapper,( ( ::Dynamic)(::hx::ClassOf< ::String >()) )))) {
HXLINE( 173)			_hx_tmp1 = !(::Reflect_obj::isFunction(updateMapper));
            		}
            		else {
HXLINE( 173)			_hx_tmp1 = false;
            		}
HXDLIN( 173)		if (_hx_tmp1) {
HXLINE( 174)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("updateMapper must be a string or function",e1,0d,80,87)));
            		}
HXLINE( 176)		this->recordType = recordType;
HXLINE( 177)		this->strategyMethod = strategyMethod;
HXLINE( 178)		this->updateMapper = updateMapper;
            	}

Dynamic Mutator_obj::__CreateEmpty() { return new Mutator_obj; }

void *Mutator_obj::_hx_vtable = 0;

Dynamic Mutator_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Mutator_obj > _hx_result = new Mutator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Mutator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1e10b1a7;
}


::hx::ObjectPtr< Mutator_obj > Mutator_obj::__new(::String recordType, ::Dynamic strategyMethod, ::Dynamic updateMapper) {
	::hx::ObjectPtr< Mutator_obj > __this = new Mutator_obj();
	__this->__construct(recordType,strategyMethod,updateMapper);
	return __this;
}

::hx::ObjectPtr< Mutator_obj > Mutator_obj::__alloc(::hx::Ctx *_hx_ctx,::String recordType, ::Dynamic strategyMethod, ::Dynamic updateMapper) {
	Mutator_obj *__this = (Mutator_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Mutator_obj), true, "persistence._Persistence.Mutator"));
	*(void **)__this = Mutator_obj::_hx_vtable;
	__this->__construct(recordType,strategyMethod,updateMapper);
	return __this;
}

Mutator_obj::Mutator_obj()
{
}

void Mutator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mutator);
	HX_MARK_MEMBER_NAME(recordType,"recordType");
	HX_MARK_MEMBER_NAME(strategyMethod,"strategyMethod");
	HX_MARK_MEMBER_NAME(updateMapper,"updateMapper");
	HX_MARK_END_CLASS();
}

void Mutator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(recordType,"recordType");
	HX_VISIT_MEMBER_NAME(strategyMethod,"strategyMethod");
	HX_VISIT_MEMBER_NAME(updateMapper,"updateMapper");
}

::hx::Val Mutator_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"recordType") ) { return ::hx::Val( recordType ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateMapper") ) { return ::hx::Val( updateMapper ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strategyMethod") ) { return ::hx::Val( strategyMethod ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Mutator_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"recordType") ) { recordType=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateMapper") ) { updateMapper=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strategyMethod") ) { strategyMethod=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mutator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("recordType",eb,b1,5b,61));
	outFields->push(HX_("strategyMethod",b4,fb,77,6e));
	outFields->push(HX_("updateMapper",aa,7a,e5,b8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Mutator_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Mutator_obj,recordType),HX_("recordType",eb,b1,5b,61)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Mutator_obj,strategyMethod),HX_("strategyMethod",b4,fb,77,6e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Mutator_obj,updateMapper),HX_("updateMapper",aa,7a,e5,b8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Mutator_obj_sStaticStorageInfo = 0;
#endif

static ::String Mutator_obj_sMemberFields[] = {
	HX_("recordType",eb,b1,5b,61),
	HX_("strategyMethod",b4,fb,77,6e),
	HX_("updateMapper",aa,7a,e5,b8),
	::String(null()) };

::hx::Class Mutator_obj::__mClass;

void Mutator_obj::__register()
{
	Mutator_obj _hx_dummy;
	Mutator_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("persistence._Persistence.Mutator",03,ff,7b,d5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Mutator_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Mutator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mutator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mutator_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Mutator_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9dae053d9ec60bd7_164_boot)
HXDLIN( 164)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
}

} // end namespace persistence
} // end namespace _Persistence
